services:
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    hostname: gluetun
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    environment:
      - PUID=${PUID:?err}
      - PGID=${PGID:?err}
      - UMASK=${UMASK:?err}
      - TZ=${TZ}
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER:?err}
      - OPENVPN_USER=${VPN_USERNAME:?err}
      - OPENVPN_PASSWORD=${VPN_PASSWORD:?err}
      - SERVER_COUNTRIES=${SERVER_COUNTRIES}
      - SERVER_REGIONS=${SERVER_REGIONS}
      - SERVER_CITIES=${SERVER_CITIES}
      - SERVER_HOSTNAMES=${SERVER_HOSTNAMES}
      - SERVER_CATEGORIES=${SERVER_CATEGORIES}
      - HTTP_CONTROL_SERVER_ADDRESS=:${GLUETUN_CONTROL_PORT:?err}
      - VPN_TYPE=${VPN_TYPE}
      - VPN_ENDPOINT_IP=${VPN_ENDPOINT_IP}
      - VPN_ENDPOINT_PORT=${VPN_ENDPOINT_PORT}
      - WIREGUARD_PUBLIC_KEY=${WIREGUARD_PUBLIC_KEY}
      - WIREGUARD_PRIVATE_KEY=${WIREGUARD_PRIVATE_KEY}
      - WIREGUARD_PRESHARED_KEY=${WIREGUARD_PRESHARED_KEY}
      - WIREGUARD_ADDRESSES=${WIREGUARD_ADDRESSES}
      - HTTPPROXY=on
      - SHADOWSOCKS=on
    volumes:
      - ${HOME}/a_dockerdata/mediastack/gluetun:/gluetun
    networks:
      - public
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:${GLUETUN_CONTROL_PORT:?err}/v1/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

#  prometheus:
#    image: prom/prometheus
#    container_name: prometheus
#    hostname: prometheus
#    restart: unless-stopped
#    volumes:
#      - ${HOME}/a_dockerdata/mediastack/prometheus:/prometheus
#    environment:
#      - TZ=${TZ}
#    networks:
#      - public
#    # ports:
#    #   - "9090:9090"

#  grafana:
#    image: grafana/grafana-enterprise
#    container_name: grafana
#    hostname: grafana
#    restart: unless-stopped
#    volumes:
#      - ${HOME}/a_dockerdata/mediastack/grafana:/var/lib/grafana
#    environment:
#      - TZ=${TZ}
#    networks:
#      - public
#    # ports:
#      - "3000:3000"



#  bazarr:
#    image: lscr.io/linuxserver/bazarr:latest
#    container_name: bazarr
#    hostname: bazarr
#    restart: unless-stopped
#    user: ${PUID:?err}:${PGID:?err}
#    volumes:
#      - ${HOME}/${FOLDER_FOR_MEDIA:?err}:/data
#      - ${HOME}/a_dockerdata/mediastack/bazarr:/config
#    environment:
#      - TZ=${TZ}
#    networks:
#      - public
#    # ports:
#    #   - "6767:6767"

#  lidarr:
#    image: lscr.io/linuxserver/lidarr:latest
#    container_name: lidarr
#    hostname: lidarr
#    restart: unless-stopped
#    user: ${PUID:?err}:${PGID:?err}
#    volumes:
#      - ${HOME}/${FOLDER_FOR_MEDIA:?err}:/data
#      - ${HOME}/a_dockerdata/mediastack/lidarr:/config
#    environment:
#      - TZ=${TZ}
#    networks:
#      - public
#    # ports:
#    #   - "8686:8686"

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    hostname: qbittorrent
    restart: unless-stopped
    user: ${PUID:?err}:${PGID:?err}
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    volumes:
      - ${HOME}/${FOLDER_FOR_MEDIA:?err}:/data
      - ${HOME}/a_dockerdata/mediastack/qbittorrent:/config
    environment:
      - TZ=${TZ}
      - WEBUI_PORT=${WEBUI_PORT_QBITTORRENT:?err}
      - TORRENTING_PORT=${QBIT_PORT:?err}
    network_mode: "service:gluetun"
    labels:
      - traefik.enable=true
    # ROUTERS
      - traefik.http.routers.qbittorrent.service=qbittorrent
      - traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.${CLOUDFLARE_DNS_ZONE:?err}`)
      - traefik.http.routers.qbittorrent.entrypoints=secureweb
      - traefik.http.routers.qbittorrent.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
    # SERVICES
      - traefik.http.services.qbittorrent.loadbalancer.server.scheme=http
      - traefik.http.services.qbittorrent.loadbalancer.server.port=${WEBUI_PORT_QBITTORRENT:?err}
    # MIDDLEWARES

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    hostname: radarr
    restart: unless-stopped
    user: ${PUID:?err}:${PGID:?err}
    volumes:
      - ${HOME}/${FOLDER_FOR_MEDIA:?err}:/data
      - ${HOME}/a_dockerdata/mediastack/radarr:/config
    environment:
      - TZ=${TZ}
    networks:
      - public
    # ports:
    #   - "7878:7878"

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    hostname: sonarr
    restart: unless-stopped
    user: ${PUID:?err}:${PGID:?err}
    volumes:
      - ${HOME}/${FOLDER_FOR_MEDIA:?err}:/data
      - ${HOME}/a_dockerdata/mediastack/sonarr:/config
    environment:
      - TZ=${TZ}
    networks:
      - public
    # ports:
    #   - "8989:8989"

#  readarr:
#    image: lscr.io/linuxserver/readarr:develop
#    container_name: readarr
#    hostname: readarr
#    restart: unless-stopped
#    user: ${PUID:?err}:${PGID:?err}
#    volumes:
#      - ${HOME}/${FOLDER_FOR_MEDIA:?err}:/data
#      - ${HOME}/a_dockerdata/mediastack/readarr:/config
#    environment:
#      - TZ=${TZ}
#    networks:
#      - public
#    # ports:
#    #   - "8787:8787"

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    hostname: prowlarr
    restart: unless-stopped
    user: ${PUID:?err}:${PGID:?err}
    volumes:
      - ${HOME}/a_dockerdata/mediastack/prowlarr:/config
    environment:
      - TZ=${TZ}
    networks:
      - public
    # ports:
    #   - "9696:9696"

networks:
  public:
    external: true
